// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xc4oHLU6bxB8LcxYsqWiRJ
// Component: Uw4nRZRJ8h66

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Avatar from "../../Avatar"; // plasmic-import: eR0J_kIG_8zw/component
import TextInput from "../../TextInput"; // plasmic-import: FeO9F9kqLFEu/component
import ChatList from "../../ChatList"; // plasmic-import: xO2R0_xrF_Z8/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: xc4oHLU6bxB8LcxYsqWiRJ/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: Uw4nRZRJ8h66/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: c0CcLIFV2w9Y/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: kbzAdglyU59e/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: b3FhWjF3yC4U/icon

createPlasmicElementProxy;

export type PlasmicSidebar__VariantMembers = {};
export type PlasmicSidebar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>();

export type PlasmicSidebar__ArgsType = {
  username?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>("username");

export type PlasmicSidebar__OverridesType = {
  sidebar?: Flex__<"div">;
  headerProfile?: Flex__<"div">;
  userAvatar?: Flex__<typeof Avatar>;
  logoutIcon?: Flex__<"svg">;
  searchInput?: Flex__<"div">;
  searchRoomTextInput?: Flex__<typeof TextInput>;
  addNewRoomWrapper?: Flex__<"div">;
  text?: Flex__<"div">;
  chatList?: Flex__<typeof ChatList>;
};

export interface DefaultSidebarProps {
  username?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "searchRoomTextInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"sidebar"}
      data-plasmic-override={overrides.sidebar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.sidebar
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"headerProfile"}
        data-plasmic-override={overrides.headerProfile}
        hasGap={true}
        className={classNames(projectcss.all, sty.headerProfile)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__dtEeX)}
        >
          <Avatar
            data-plasmic-name={"userAvatar"}
            data-plasmic-override={overrides.userAvatar}
            className={classNames("__wab_instance", sty.userAvatar)}
            isEmpty={true}
            size={"_60"}
          />

          <div className={classNames(projectcss.all, sty.freeBox__bnPh)}>
            {renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.username
            })}
          </div>
        </Stack__>
        <IconIcon
          data-plasmic-name={"logoutIcon"}
          data-plasmic-override={overrides.logoutIcon}
          className={classNames(projectcss.all, sty.logoutIcon)}
          role={"img"}
        />
      </Stack__>
      <div
        data-plasmic-name={"searchInput"}
        data-plasmic-override={overrides.searchInput}
        className={classNames(projectcss.all, sty.searchInput)}
      >
        <TextInput
          data-plasmic-name={"searchRoomTextInput"}
          data-plasmic-override={overrides.searchRoomTextInput}
          className={classNames("__wab_instance", sty.searchRoomTextInput)}
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["searchRoomTextInput", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          placeholder={"Search room by name..."}
          value={
            generateStateValueProp($state, ["searchRoomTextInput", "value"]) ??
            ""
          }
        />
      </div>
      <div
        data-plasmic-name={"addNewRoomWrapper"}
        data-plasmic-override={overrides.addNewRoomWrapper}
        className={classNames(projectcss.all, sty.addNewRoomWrapper)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Add New Room"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___2Lt2R)}>
        <ChatList
          data-plasmic-name={"chatList"}
          data-plasmic-override={overrides.chatList}
          className={classNames("__wab_instance", sty.chatList)}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sidebar: [
    "sidebar",
    "headerProfile",
    "userAvatar",
    "logoutIcon",
    "searchInput",
    "searchRoomTextInput",
    "addNewRoomWrapper",
    "text",
    "chatList"
  ],
  headerProfile: ["headerProfile", "userAvatar", "logoutIcon"],
  userAvatar: ["userAvatar"],
  logoutIcon: ["logoutIcon"],
  searchInput: ["searchInput", "searchRoomTextInput"],
  searchRoomTextInput: ["searchRoomTextInput"],
  addNewRoomWrapper: ["addNewRoomWrapper", "text"],
  text: ["text"],
  chatList: ["chatList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  sidebar: "div";
  headerProfile: "div";
  userAvatar: typeof Avatar;
  logoutIcon: "svg";
  searchInput: "div";
  searchRoomTextInput: typeof TextInput;
  addNewRoomWrapper: "div";
  text: "div";
  chatList: typeof ChatList;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSidebar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebar__ArgProps,
          internalVariantPropNames: PlasmicSidebar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sidebar") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("sidebar"),
  {
    // Helper components rendering sub-elements
    headerProfile: makeNodeComponent("headerProfile"),
    userAvatar: makeNodeComponent("userAvatar"),
    logoutIcon: makeNodeComponent("logoutIcon"),
    searchInput: makeNodeComponent("searchInput"),
    searchRoomTextInput: makeNodeComponent("searchRoomTextInput"),
    addNewRoomWrapper: makeNodeComponent("addNewRoomWrapper"),
    text: makeNodeComponent("text"),
    chatList: makeNodeComponent("chatList"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
